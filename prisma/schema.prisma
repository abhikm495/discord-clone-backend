// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Profile{
  id String @id @default(uuid())
  userId Int @unique @default(autoincrement())
  name String 
  imageUrl String @db.Text
  email String @unique @db.Text
  hashedPassword String
  secret String? @unique
  servers Server[]
  members Member[]
  channel Channel[] 

  createdAt DateTime @default(now())
  updated DateTime @updatedAt
}

model Server{
  id Int @unique @default(autoincrement())
  name String @unique
  imageUrl String @db.Text
  inviteCode String @db.Text

  profileId Int
  profile Profile @relation(fields: [profileId],references: [userId],onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profileId])
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id Int @unique @default(autoincrement())
  role MemberRole @default(GUEST)

  profileId Int 
  profile Profile @relation(fields: [profileId],references: [userId],onDelete: Cascade)

  serverId Int
  server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id Int @unique @default(autoincrement())
  name String
  type ChannelType @default(TEXT)

  profileId Int
  profile Profile @relation(fields: [profileId],references: [userId],onDelete: Cascade)

  serverId Int
  server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}